org: bhupendradev
service: federation-app

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs20.x  # Update to a valid runtime
  region: ap-south-1  # Set to Mumbai region
  environment:
    BUCKET_NAME: federation-app-photos
    TABLE_NAME: FederationTable
    AUTH_SECRET: federation-secret
  iamRoleStatements:  # Move iamRoleStatements here
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*

functions:
  # Federation APIs
  createFederation:
    handler: src/handlers/federation.create
    events:
      - http:
          path: federation
          method: post
          authorizer: validateToken

  updateFederation:
    handler: src/handlers/federation.update
    events:
      - http:
          path: federation/{id}
          method: put
          authorizer: validateToken

  fetchFederation:
    handler: src/handlers/federation.fetch
    events:
      - http:
          path: federation/{id}
          method: get
          authorizer: validateToken

  # Building APIs
  createBuildingDetail:
    handler: src/handlers/buildingDetails.create
    events:
      - http:
          path: building-detail
          method: post
          authorizer: validateToken

  # Resident APIs (includes S3 image upload)
  createResident:
    handler: src/handlers/resident.create
    events:
      - http:
          path: resident
          method: post
          authorizer: validateToken

  # Attendance APIs
  createAttendance:
    handler: src/handlers/attendance.create
    events:
      - http:
          path: attendance
          method: post
          authorizer: validateToken

  fetchAttendance:
    handler: src/handlers/attendance.fetch
    events:
      - http:
          path: attendance
          method: get
          authorizer: validateToken

  # Service Detail APIs
  createServiceDetail:
    handler: src/handlers/serviceDetail.create
    events:
      - http:
          path: service-detail
          method: post
          authorizer: validateToken

  # Token-based Authorizer
  validateToken:
    handler: src/handlers/auth.validateToken

  # Auth APIs
  registerUser:
    handler: src/handlers/auth.register
    events:
      - http:
          path: auth/register
          method: post

  loginUser:
    handler: src/handlers/auth.login
    events:
      - http:
          path: auth/login
          method: post

  attendance:
    handler: src/handlers/attendanceHandler.fetch
    events:
      - http:
          path: api/attendance
          method: get
          authorizer: validateToken

resources:
  Resources:
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}

    # DynamoDB Tables
    FederationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    BuildingDetailsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: BuildingDetailsTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ResidentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ResidentTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ServiceDetailTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ServiceDetailTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    AttendanceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AttendanceTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    EmployeeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EmployeeTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline

custom:
  serverless-offline:
    port: 3000